// <auto-generated />
using System;
using StoreService.Config;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace StoreService.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    partial class StoreServiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.17");

            modelBuilder.Entity("StoreService.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("StoreService.Models.Headphones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("HeadphonesPriceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HeadphonesSpecId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ModelId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HeadphonesPriceId");

                    b.HasIndex("HeadphonesSpecId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ModelId");

                    b.ToTable("Headphones");
                });

            modelBuilder.Entity("StoreService.Models.HeadphonesImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("HeadphonesModelId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PublicId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HeadphonesModelId");

                    b.ToTable("HeadphonesImages");
                });

            modelBuilder.Entity("StoreService.Models.HeadphonesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("HeadphonesModels");
                });

            modelBuilder.Entity("StoreService.Models.HeadphonesPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Cost")
                        .HasColumnType("TEXT");

                    b.Property<int>("ModelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpecId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("SpecId");

                    b.ToTable("HeadphonesPrices");
                });

            modelBuilder.Entity("StoreService.Models.HeadphonesSpec", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codec")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FrequencyRangeHz")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsWireless")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("HeadphonesSpecs");
                });

            modelBuilder.Entity("StoreService.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StatusId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("StatusId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("StoreService.Models.ItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ItemsStatuses");
                });

            modelBuilder.Entity("StoreService.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("StoreService.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Manufacturer");
                });

            modelBuilder.Entity("StoreService.Models.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ModelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PhonePriceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PhoneSpecId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ModelId");

                    b.HasIndex("PhonePriceId");

                    b.HasIndex("PhoneSpecId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("StoreService.Models.PhoneImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PhoneModelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PublicId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PhoneModelId");

                    b.ToTable("PhoneImages");
                });

            modelBuilder.Entity("StoreService.Models.PhoneModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("PhoneModels");
                });

            modelBuilder.Entity("StoreService.Models.PhonePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Cost")
                        .HasColumnType("TEXT");

                    b.Property<int>("ModelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpecId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("SpecId");

                    b.ToTable("PhonePrices");
                });

            modelBuilder.Entity("StoreService.Models.PhoneSpec", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("CameraMp")
                        .HasColumnType("REAL");

                    b.Property<float>("DisplayIn")
                        .HasColumnType("REAL");

                    b.Property<int>("RamGb")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StorageGb")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("PhoneSpecs");
                });

            modelBuilder.Entity("StoreService.Models.Headphones", b =>
                {
                    b.HasOne("StoreService.Models.HeadphonesPrice", "HeadphonesPrice")
                        .WithMany()
                        .HasForeignKey("HeadphonesPriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreService.Models.HeadphonesSpec", "HeadphonesSpec")
                        .WithMany()
                        .HasForeignKey("HeadphonesSpecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreService.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreService.Models.HeadphonesModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HeadphonesPrice");

                    b.Navigation("HeadphonesSpec");

                    b.Navigation("Item");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("StoreService.Models.HeadphonesImage", b =>
                {
                    b.HasOne("StoreService.Models.HeadphonesModel", "HeadphonesModel")
                        .WithMany()
                        .HasForeignKey("HeadphonesModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HeadphonesModel");
                });

            modelBuilder.Entity("StoreService.Models.HeadphonesModel", b =>
                {
                    b.HasOne("StoreService.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("StoreService.Models.HeadphonesPrice", b =>
                {
                    b.HasOne("StoreService.Models.HeadphonesModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreService.Models.HeadphonesSpec", "Spec")
                        .WithMany()
                        .HasForeignKey("SpecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("Spec");
                });

            modelBuilder.Entity("StoreService.Models.Item", b =>
                {
                    b.HasOne("StoreService.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreService.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("StoreService.Models.ItemStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Category");

                    b.Navigation("Location");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("StoreService.Models.Phone", b =>
                {
                    b.HasOne("StoreService.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreService.Models.PhoneModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId");

                    b.HasOne("StoreService.Models.PhonePrice", "PhonePrice")
                        .WithMany()
                        .HasForeignKey("PhonePriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreService.Models.PhoneSpec", "PhoneSpec")
                        .WithMany()
                        .HasForeignKey("PhoneSpecId");

                    b.Navigation("Item");

                    b.Navigation("Model");

                    b.Navigation("PhonePrice");

                    b.Navigation("PhoneSpec");
                });

            modelBuilder.Entity("StoreService.Models.PhoneImage", b =>
                {
                    b.HasOne("StoreService.Models.PhoneModel", "PhoneModel")
                        .WithMany()
                        .HasForeignKey("PhoneModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhoneModel");
                });

            modelBuilder.Entity("StoreService.Models.PhoneModel", b =>
                {
                    b.HasOne("StoreService.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("StoreService.Models.PhonePrice", b =>
                {
                    b.HasOne("StoreService.Models.PhoneModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreService.Models.PhoneSpec", "Spec")
                        .WithMany()
                        .HasForeignKey("SpecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("Spec");
                });
#pragma warning restore 612, 618
        }
    }
}
